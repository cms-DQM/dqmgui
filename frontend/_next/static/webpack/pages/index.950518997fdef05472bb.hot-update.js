webpackHotUpdate_N_E("pages/index",{

/***/ "./components/utils.ts":
/*!*****************************!*\
  !*** ./components/utils.ts ***!
  \*****************************/
/*! exports provided: seperateRunAndLumiInSearch, get_label, getPathName, makeid, getZoomedPlotsUrlForOverlayingPlotsWithDifferentNames, getZoomedOverlaidPlotsUrlForOverlayingPlotsWithDifferentNames, decodePlotName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"seperateRunAndLumiInSearch\", function() { return seperateRunAndLumiInSearch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_label\", function() { return get_label; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPathName\", function() { return getPathName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeid\", function() { return makeid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getZoomedPlotsUrlForOverlayingPlotsWithDifferentNames\", function() { return getZoomedPlotsUrlForOverlayingPlotsWithDifferentNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getZoomedOverlaidPlotsUrlForOverlayingPlotsWithDifferentNames\", function() { return getZoomedOverlaidPlotsUrlForOverlayingPlotsWithDifferentNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decodePlotName\", function() { return decodePlotName; });\nvar seperateRunAndLumiInSearch = function seperateRunAndLumiInSearch(runAndLumi) {\n  var runAndLumiArray = runAndLumi.split(':');\n  var parsedRun = runAndLumiArray[0];\n  var parsedLumi = runAndLumiArray[1] ? parseInt(runAndLumiArray[1]) : 0;\n  return {\n    parsedRun: parsedRun,\n    parsedLumi: parsedLumi\n  };\n};\nvar get_label = function get_label(info, data) {\n  var value = data ? data.fString : null;\n\n  if (info !== null && info !== void 0 && info.type && info.type === 'time' && value) {\n    var milisec = new Date(parseInt(value) * 1000);\n    var time = milisec.toUTCString();\n    return time;\n  } else {\n    return value ? value : 'No information';\n  }\n};\nvar getPathName = function getPathName() {\n  var isBrowser = function isBrowser() {\n    return true;\n  };\n\n  var pathName = isBrowser() && window.location.pathname || '/';\n  var the_lats_char = pathName.charAt(pathName.length - 1);\n\n  if (the_lats_char !== '/') {\n    pathName = pathName + '/';\n  }\n\n  return pathName;\n};\nvar makeid = function makeid() {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n  for (var i = 0; i < 5; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n};\nvar isProd = false;\nvar getZoomedPlotsUrlForOverlayingPlotsWithDifferentNames = function getZoomedPlotsUrlForOverlayingPlotsWithDifferentNames(query, selected_plot) {\n  var page = isProd ? 'plotsLocalOverlay' : 'plotsLocalOverlay/';\n  var run = 'run_number=' + query.run_number;\n  var dataset = 'dataset_name=' + query.dataset_name;\n  var path = 'folders_path=' + selected_plot.path;\n  var plot_name = 'plot_name=' + selected_plot.name;\n  var queryURL = [run, dataset, path, plot_name].join('&');\n  var plotsLocalOverlayURL = [page, queryURL].join('?');\n  return plotsLocalOverlayURL;\n};\nvar getZoomedOverlaidPlotsUrlForOverlayingPlotsWithDifferentNames = function getZoomedOverlaidPlotsUrlForOverlayingPlotsWithDifferentNames(query, selected_plot) {\n  var _query$overlay_data;\n\n  var page = isProd ? 'plotsLocalOverlay' : 'plotsLocalOverlay/';\n  var run = 'run_number=' + query.run_number;\n  var dataset = 'dataset_name=' + query.dataset_name;\n  var path = 'folders_path=' + selected_plot.path;\n  var plot_name = 'plot_name=' + selected_plot.name;\n  var globally_overlaid_plots = (_query$overlay_data = query.overlay_data) === null || _query$overlay_data === void 0 ? void 0 : _query$overlay_data.split('&').map(function (plot) {\n    var parts = plot.split('/');\n    var run_number = parts.shift();\n    var pathAndLabel = parts.splice(3);\n    var dataset_name = parts.join('/');\n    var path = selected_plot.path;\n    var plot_name = selected_plot.name;\n    var label = pathAndLabel.pop();\n    var string = [run_number, dataset_name, path, plot_name, label].join('/');\n    return string;\n  });\n  var global_overlay = 'overlaidGlobally=' + globally_overlaid_plots.join('&');\n  var queryURL = [run, dataset, path, plot_name, global_overlay].join('&');\n  var plotsLocalOverlayURL = [page, queryURL].join('?');\n  return plotsLocalOverlayURL;\n};\nvar decodePlotName = function decodePlotName(tooLong, plot_name) {\n  try {\n    if (tooLong) {\n      var decode_name = decodeURI(plot_name);\n      return decode_name.substring(0, 25) + '...'; //some of names are double encoded \n    } else {\n      return decodeURI(plot_name);\n    }\n  } catch (_unused) {\n    if (tooLong) {\n      return plot_name.substring(0, 25) + '...'; //some of names are double encoded \n    } else {\n      return plot_name;\n    }\n  }\n};\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/utils.ts\n");

/***/ })

})