<!DOCTYPE html>
<html lang="en">
   <head>
      <!-- as prototype used: https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometries.html -->
      <title>three.js model for TGeo object</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <style>
         body {
            font-family: Monospace;
            background-color: #000;
            margin: 0px;
            overflow: hidden;
         }
      </style>
   </head>
   <body>

      <!-- use three.js from JSROOT -->
      <!-- script src="https://threejs.org/build/three.js"></script-->

      <script src="https://threejs.org/examples/js/libs/stats.min.js"></script>

      <script src="../scripts/JSRootCore.js?geom&onload=init" type="text/javascript"></script>

      <script>

         var container, stats;

         var camera, scene, renderer, geom_size = 400, dummy = null;

         function add_geometry(obj) {

            // options for building three.js model
            var opt = { numfaces: 100000, numnodes: 1000 };
            if (JSROOT.GetUrlOption("all") !== null) {
               opt.numfaces *= 100;
               opt.numnodes *= 100;
            }

            if ((JSROOT.GetUrlOption("dflt") !== null) || (JSROOT.GetUrlOption("dflt_colors") !== null))
               opt.dflt_colors = true;

            // function demonstrate creation of three.js model
            var obj3d = JSROOT.GEO.build(obj, opt);

            if (!obj3d) return;
            scene.remove( dummy );
            scene.add( obj3d );

            var box3 = new THREE.Box3().setFromObject(obj3d);

            geom_size = box3.getSize(new THREE.Vector3()).length();

            camera.far = geom_size*5;
            camera.updateProjectionMatrix();
         }

         function init() {

            container = document.createElement( 'div' );
            document.body.appendChild( container );

            camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, geom_size*5 );
            camera.position.y = geom_size;

            scene = new THREE.Scene();
            scene.add( new THREE.AmbientLight( 0x404040 ) );

            var light = new THREE.DirectionalLight( 0xffffff );
            light.position.set( 0, 1, 0 );
            scene.add( light );

            // ------------------- reading geometry object --------------------------

            var filename = JSROOT.GetUrlOption("file") || "https://root.cern/js/files/geom/simple_alice.json.gz";

            // filename = "https://root.cern/files/tank.root";

            if (filename.indexOf(".root")>0) {
               // load geometry from ROOT file
               var itemname = JSROOT.GetUrlOption("item") || "geom";
               JSROOT.OpenFile(filename, function(file) {
                  file.ReadObject(itemname, add_geometry);
               });
            } else {
               // load geometry from JSON as object
               JSROOT.NewHttpRequest(filename, 'object', add_geometry).send();
            }

            // ------------------- end of reading geometry object --------------------------

            // dummy object, seen in the beginning
            var material = new THREE.MeshLambertMaterial( { side: THREE.DoubleSide } );
            dummy = new THREE.Mesh( new THREE.TetrahedronGeometry( 75, 0 ), material );
            // object.position.set( 200, 0, 200 );
            scene.add( dummy );

            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );

            container.appendChild( renderer.domElement );

            stats = new Stats();
            container.appendChild( stats.dom );

            //
            window.addEventListener( 'resize', onWindowResize, false );

            animate();
         }

         function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

         }

         //

         function animate() {

            requestAnimationFrame( animate );

            render();
            stats.update();

         }

         function render() {

            var timer = Date.now() * 0.0001;

            camera.position.x = Math.cos( timer )*geom_size;
            camera.position.z = Math.sin( timer )*geom_size;
            camera.position.y = geom_size;

            camera.lookAt( scene.position );

            for ( var i = 0, l = scene.children.length; i < l; i ++ ) {

               var object = scene.children[ i ];

               object.rotation.x = timer * 5;
               object.rotation.y = timer * 2.5;

            }

            // set rendering order for transparent volumes, create with JSROOT
            JSROOT.GEO.produceRenderOrder(scene, camera.position, 'dflt');

            renderer.render( scene, camera );

         }

      </script>

   </body>
</html>
