#!/bin/bash

##H Usage 1: manage [options] ACTION [ARG] [SECURITY-STRING]
##H
##H Available actions:
##H   help            show this help
##H   version         get current version of the service
##H   status          show current service's status
##H   restart         (re)start the service
##H   start           (re)start the service
##H   stop            stop the service
##H   compile         refresh render plugins

# Always change the directory to make sure correct process can be traced when stopping
BASEPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; cd ../ ; pwd -P )"
cd $BASEPATH

start()
{
  PORT="8889"
  if [ -n "$1" ]
  then
    PORT=$1
  fi

  # Perform kinit to be able to access EOS
  export keytab=/data/srv/current/auth/wmcore-auth/keytab
  principal=`klist -k "$keytab" | tail -1 | awk '{print $2}'`
  kinit $principal -k -t "$keytab" 2>&1 1>& /dev/null
  if [ $? == 1 ]; then
    echo "Unable to perform kinit."
  fi

  # Run in the background and detach from the terminal
  nohup $BASEPATH/scripts/dqmguibackend.sh -p $PORT &> /dev/null &

  echo "DQM GUI has been started in the background."
  echo "Log can be found here:" $BASEPATH/data/logs/dqmgui.log
}

stop()
{
  # Get DQM GUI that is running from this directory
  LINES=$(ps awwx | grep $BASEPATH/scripts/../python/app.py | grep -v grep)
  NR_OF_PROCESSES=$(wc -l <<< "$LINES")

  if [ -z "$LINES" ]; then
    : # DQM GUI not running, do nothing
  else
    PIDS=$(awk '{print $1}' <<< "$LINES")
    # Kill all running GUIs and all its descendant processes
    for PID in $PIDS
    do
      if [ ! -z "$PID" ]; then
        pgrep -P $PID | xargs kill > /dev/null 2>&1
        kill -9 $PID > /dev/null 2>&1
      fi
    done
  fi
}

status()
{
  # Get DQM GUI that is running from this directory
  LINES=$(ps awwx | grep $BASEPATH/scripts/../python/app.py | grep -v grep)
  NR_OF_PROCESSES=$(wc -l <<< "$LINES")

  if [ -z "$LINES" ]; then
    echo "DQM GUI is not running"
  elif [ $NR_OF_PROCESSES -ne 1 ]; then
    echo "Found more than one DQM GUI running in the same directory."
    echo "$LINES"
    exit
  else
    PID=$(awk '{print $1}' <<< "$LINES")
    pstree -a $PID
  fi
}

compile()
{
  $BASEPATH/scripts/build.sh
}

version()
{
  echo "Latest commit:"
  git log --name-status HEAD^..HEAD
}

case "$1" in
  start | restart )
    stop
    start $2
    ;;

  status )
    status
    ;;

  stop )
    stop
    ;;

  compile )
    compile
    ;;

  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;

  version )
    version
    ;;

  * )
    echo "$0: unknown action '$1', please try '$0 help' for documentation." 1>&2
    exit 1
    ;;
esac
