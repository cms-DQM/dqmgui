#!/usr/bin/env python

import urllib2
import re
import os
import time
import sys
import json
from traceback import print_exc
from datetime import datetime
from urllib import quote
from fcntl import lockf, LOCK_EX, LOCK_UN
from socket import socket, AF_INET, SOCK_STREAM, gethostname
from subprocess import Popen, PIPE

# IMPORTANT: If you want to play a test sound, just start the program with
# all the usual parameters, but add "test" as last parameter.
# Then the program will not start in daemon mode, but just send a test sound to
# the sound server.

# --------------------------------------------------------------------
# The SoundAlarm agent monitors the state of alarms in histograms
# located in ERROR_FOLDER. This location is a layout with a selection
# of MEs that follow very closely the state of the detector. The agent
# makes the following assumptions:
# 1. Each ME listed in the layout will raise an alarm if its QT fails,
# however, the ME and QT have to be done in such way that, if the
# condition for the QT to fail ceases, the QT should be successful
# and thus the alarm should be turned off.
# 2. Trend plots located in this layout should *not* raise alarms, if
# they do, they must comply with assumption 1.
# 3. The GUI that is specified by BASEURL has a Live source.
#
# Once a ME raises an alarm it would be immediately broadcasted, after
# that it gets bundled with all actives alarms so that only one
# message is broadcasted every REMINDERINTERVAL seconds. An alarm
# ceases to be broadcasted if it has been sent more than REBROADCAST
# times. In order to generate the most efficient use of the CMS-WOW
# system, the global clock gets reset every time we pass from 0 alarms
# to at least 1 alarm.

# There is an extension to this tool called visDQMSoundAlarmManager.
# It's a small web app which displays all plots located in ERROR_FOLDER
# and provides an ability to disable alarms for chosen plots. 
# This tool queries the API of the visDQMSoundAlarmManager for the list 
# of disabled plots before sending the alarms.

sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

# --------------------------------------------------------------------
# Command line parameters
BASEURL = quote(sys.argv[1],':/-_') # GUI Server's URL
SOUNDSERVER = sys.argv[2] # CMS-WOW server's name
PORT = int(sys.argv[3]) # Listening port on the CMS-WOW server
REMINDERINTERVAL = int(sys.argv[4]) # Seconds between sonourous alarms
REBROADCAST = int(sys.argv[5]) # Number of times the same alarm is broadcasted
if len(sys.argv) >= 7:
  EMAIL_ADDRESSES = sys.argv[6] # Emails to notify, multiple addresses are
                                # accepted, separated by ','
else:
  EMAIL_ADDRESSES = ''

# URL to get a list of disabled alarms
ALARM_MANAGER_URL = 'http://localhost:8031/disabled'
if len(sys.argv) >= 8:
  ALARM_MANAGER_URL = sys.argv[7]

# To enable the special "test-mode" add a 8th argument "test"
# Otherwise the daemon does its normal stuff (which is good)
if len(sys.argv) >= 9:
  IS_TEST = (sys.argv[8] == "test")
else:
  IS_TEST = False


# GLOBAL CONSTANTS
# location of the error folder that contains alarms histos.
ERROR_FOLDER = quote("00 Shift/Errors", ':/-_')
DATA_LOCATION = quote("data/json/live/1/Global/Online/ALL", ':/-_')

# Body of the XML message that is sent to CMS-WOW
MSGBODY = ('<CommandSequence><alarm sender="DQM" sound="DQM_1.wav" talk="%s">'
           '%s Check plots in the DQM Error folder.</alarm></CommandSequence>')

WAITTIME = 30

# --------------------------------------------------------------------
def logme(msg, *args):
  procid = "[%s/%d]" % (__file__.rsplit("/", 1)[-1], os.getpid())
  print datetime.now(), procid, msg % args

# Short hand to send XML message to CMS-WOW
def send_sound_msg(msg, spoken_msg):
  s = socket(AF_INET, SOCK_STREAM)
  s.connect((SOUNDSERVER, PORT))
  s.send(MSGBODY % (spoken_msg, msg))
  data = s.recv(1024)
  s.close()
  if data == "All ok\n":
    logme("INFO: Broadcasted message: %s ", msg)
    send_email_msg('We (DQM) just played a sound in the control room.\n'
                   'The message we played was: "%s"\n\n--\n%s' % (spoken_msg, msg))
    return True
  else:
    error_msg = "ERROR: Unexpected answer from CMS-WOW: %s" % repr(data)
    logme(error_msg)
    send_email_msg(error_msg)
    return False

# Short hand to send email message
def send_email_msg(msg):
  if EMAIL_ADDRESSES:
    logme("Sending email to %s with following message:\n%s" %
                                                (EMAIL_ADDRESSES, msg))
    process = Popen("/usr/sbin/sendmail -t", shell=True, stdin=PIPE)
    process.stdin.write("To: %s\n" % EMAIL_ADDRESSES)
    process.stdin.write("Subject: Message from the visDQMSoundAlarmDaemon on "
                        "%s at P5\n" % gethostname())
    process.stdin.write("\n") # blank line separating headers from body
    process.stdin.write("%s\n\n" % msg)
    process.stdin.write("The logs should be here: /data/srv/logs/dqmgui/"
                        "online/\n")
    process.stdin.close()
    returncode = process.wait()
    if returncode != 0:
      logme("ERROR: Sendmail exit with status %s", returncode)
  else:
    logme("Not sending email, since no emailaddresses were set.")

# Short hand to extract GUI information, it fails if the retrieved
# data is not python format.
def getGuiData(opener,url):
  page1 = opener1.open(url)
  data = page1.read()
  try:
    contents = eval(data)
  except Exception, e:
    raise e
  page1.close()
  return contents


# Construct URL pointing to the Error folder
sr = re.search(r"dqm/(online)", BASEURL)
if not sr:
  logme("FATAL: Could not identify the site from the base url")
  sys.exit(1)

BASEURL = "%s/%s/%s/" % (BASEURL, DATA_LOCATION, ERROR_FOLDER)

# This method is just to test the sound infrastructure.
# It will try to play a test message, send a test email and then exit.
def run_test():
  logme("Running in test mode.")
  msg = 'This is a test'
  spoken_msg = 'This is a test'
  # First try to test sending a sound message
  logme("Trying to send a sound message.")
  try:
    send_sound_msg(msg, spoken_msg)
  except Exception, e:
    logme('ERROR: %s', e)
    print_exc()
  # Then try to test sending an email message
  logme("Trying to send an email message.")
  try:
    send_email_msg(msg)
  except Exception, e:
    logme('ERROR: %s', e)
    print_exc()

# This method will start the actual daemon, checking the GUI every WAITTIME
# seconds
def run_daemon():
  lastMessage = 0
  remindersSent = 0

  noRun = True
  alarms = {}

  knownAlarms = set()
  while True:
    try:
      now = time.time()

      # Get data from DQM GUI:
      datareq = urllib2.Request(BASEURL)
      result = urllib2.build_opener(urllib2.ProxyHandler({})).open(datareq)
      state = result.read()
      # Arriving here, connection to GUI was successful, resetting error
      # counter.
      activeURLErrors = 0

      state = json.loads(state)

      ## Detect No run state
      if noRun == False and len(state["contents"]) <= 1:
        noRun = True
        alarms = {}
        lastMessage = 0

      if noRun and len(state["contents"]) > 1:
        noRun = False

      if noRun:
        logme("Daemon woke up. No run going on. Going back to sleep.")
        time.sleep(WAITTIME)
        continue

      # Find new alarm histos, and update alarm states
      knownNewAlarms = set()
      for histo in state["contents"]:
        if histo.has_key('path'):
          name = histo['path']
        else:
          continue
       
        # Get the disasbled alarms from the alarm manager:
        disabledAlarms = []
        try:
          datareq = urllib2.Request(ALARM_MANAGER_URL)
          result = urllib2.build_opener(urllib2.ProxyHandler({})).open(datareq)
          disabledAlarms = json.loads(result.read())
        except:
          # If we're unable to get disabled alarms, assume that all of them are enabled
          pass

        if histo['properties']['report']['alarm'] == 1:
          if name in disabledAlarms:
            logme("Histo caused an alarm but it was disabled in the alarm manager: %s" % name)
          else:
            knownNewAlarms.add(name)
            logme("Info from the DQM GUI: %s" % str(histo))

      # should alarm be triggered
      alarmsNew = knownNewAlarms.difference(knownAlarms)
      sendMessage = False
      isReminder = False

      # alarmsRecovered = knownAlarms.difference(knownNewAlarms)
      if (len(alarmsNew) > 0):
        sendMessage, isReminder = True, False
        lastMessage = now
        remindersSent = 0
      elif len(knownNewAlarms) and remindersSent < REBROADCAST:
        # situation has not changed, but we still need to 'remind' the shifter
        elapsed = now - lastMessage
        delay = (remindersSent+1) * REMINDERINTERVAL

        if elapsed >= delay:
          remindersSent += 1
          sendMessage, isReminder = True, True

      if sendMessage:
        logme("Info from the DQM GUI: %s" % str(histo))

        msgs = []
        if isReminder:
            msgs.append("Reminder. ")
        else:
            msgs.append("")

        if len(knownNewAlarms) > 1:
            msgs.append("There are %d DQM alarms." % len(knownNewAlarms))
        else:
            msgs.append("There is %d DQM alarm." % len(knownNewAlarms))

        msgs.append("\n\nAlarm names are:")
        for name in knownNewAlarms:
          msgs.append("\n  %s" % name)
          if name not in knownAlarms:
            msgs.append(" (new)")

        msgs.append("\n")
        msg = "".join(msgs)

        spoken_msgs = msgs[:2] + [" Check plots in the DQM Error folder."]
        spoken_msg = "".join(spoken_msgs).replace("DQM", "D Q M")

        send_sound_msg(msg, spoken_msg)

      knownAlarms = knownNewAlarms

      # Done some heartbeat logging:
      logme("Daemon woke up. A run was going on. %d active alarm(s)." % len(knownAlarms))

    except KeyboardInterrupt, e:
      sys.exit(0)

    except urllib2.URLError, e:
      activeURLErrors += 1
      # It happens from time to time that the daemon can't connect to the GUI
      # This can have many reasons. Usually it's solved in the next cycle, so
      # there is no point in alerting people.
      if activeURLErrors <= 3:
        logme("Daemon woke up. Couldn't connect to GUI (%d). Going back to "
              "sleep." % activeURLErrors)
      # However, when we see more then 3 times in a row that the network
      # connection is failing, then we start sending emails:
      else:
        logme("Daemon woke up. Couldn't connect to GUI for the %dth time! "
              "Sending mail and going back to sleep." % activeURLErrors)
        logme('BASEURL: %s', BASEURL)
        logme('ERROR: %s', e)
        print_exc()
        send_email_msg('ERROR: %s\n\n' % e)
        # Reset counter to -20. Otherwise you would start receiving a message
        # every 30 seconds now.
        # At least this way, the next email will only be in >10 minutes.
        activeURLErrors = -20

    except Exception, e:
      logme('ERROR: %s', e)
      print_exc()
      send_email_msg('ERROR: %s\n\n' % e)

    time.sleep(WAITTIME)

if IS_TEST:
  # If we're in test mode
  run_test()
else:
  # After starting the script, we wait a while before we try, because maybe the
  # GUI isn't started yet.
  time.sleep(10)
  # Now start the real daemon
  run_daemon()
